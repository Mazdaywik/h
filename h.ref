**
** Тоне от Саши (исправленная версия)
**
**
** Запуск программы:
**
** refgo имя-программы [width]
**
** где width — ширина картинки (по умолчанию 80 колонок)
**


*
* Знаковая арифметика с фиксированной запятой, совместимая с Рефалом-05.
* Точность вычислений 0,001
*
* t.Number ::= (s.Sign s.Rep)
* s.Sign ::= '+' | '-'
* s.Rep ::= s.NUMBER
*
* s.Rep — число тысячных.
* Знак нуля должен быть '+', т.е. ('-' 0) — недопустимое значение.
*

fromRat {
  ((s.Num) s.Denom) = <Rat (s.Num) s.Denom>;

  ('+' s.X) = ('+' s.X);
  ('-' s.X) = ('-' s.X);
}

Rat {
  (s.Num) s.Denom = ('+' </ <* s.Num 1000> s.Denom>);
}

AddR {
  (s.S s.X) (s.S s.Y) = (s.S <+ s.X s.Y>);
  ('+' s.X) ('-' s.Y) = <WrapSign <- s.X s.Y>>;
  ('-' s.X) ('+' s.Y) = <WrapSign <- s.Y s.X>>;

  t.X t.Y = <AddR <fromRat t.X> <fromRat t.Y>>;
}

WrapSign {
  '-' s.X = ('-' s.X);
  s.X = ('+' s.X);
}

SubR {
  ('+' s.X) ('+' s.Y) = <WrapSign <- s.X s.Y>>;
  ('+' s.X) ('-' s.Y) = ('+' <+ s.X s.Y>);
  ('-' s.X) ('+' s.Y) = ('-' <+ s.X s.Y>);
  ('-' s.X) ('-' s.Y) = <WrapSign <- s.Y s.X>>;

  t.X t.Y = <SubR <fromRat t.X> <fromRat t.Y>>;
}

MulR {
  (s.S s.X) (s.S s.Y) = ('+' </ <* s.X s.Y> 1000>);
  (s.a s.X) (s.b s.Y)
    , <* s.X s.Y>
    : {
        0 = ('+' 0);
        s.Mul = ('-' </ s.Mul 1000>);
      };

  t.X t.Y = <MulR <fromRat t.X> <fromRat t.Y>>;

  t.X t.Y e.Numbers = <MulR t.X <MulR t.Y e.Numbers>>;
}

DivR {
  (s.S s.X) (s.S s.Y) = ('+' </ <* s.X 1000> s.Y>);
  (s.a s.X) (s.b s.Y)
    , </ <* s.X 1000> s.Y>
    : {
        0 = ('+' 0);
        s.Div = ('-' s.Div);
      };

  t.X t.Y = <DivR <fromRat t.X> <fromRat t.Y>>;
}

CompareR {
  ('+' s.X) ('+' s.Y) = <Compare s.X s.Y>;
  ('+' s.X) ('-' s.Y) = '+';
  ('-' s.X) ('+' s.Y) = '-';
  ('-' s.X) ('-' s.Y) = <Compare s.Y s.X>;

  t.X t.Y = <CompareR <fromRat t.X> <fromRat t.Y>>;
}

Square {
  t.X = <MulR t.X t.X>;
}

AbsSubR {
  t.X t.Y = <AbsR <SubR t.X t.Y>>;
}

AbsR {
  (s.S s.X) = ('+' s.X);
}


*
* Рисовалка векторных фигур
*

Color {
  (s.Shape e.Args) t.X t.Y = <Mu s.Shape e.Args t.X t.Y>;
}

Draw {
  s.Width t.Shape =
    <DrawLines <Div <Add s.Width 1> 2> s.Width t.Shape>
}

DrawLines {
  s.TotalLines s.Width t.Shape =
    <DoDrawLines s.TotalLines s.TotalLines s.Width t.Shape>
}

DoDrawLines {
  0 s.TotalLines s.Width t.Shape =
    <DrawLine ((0) 1) s.Width t.Shape>;

  s.Line s.TotalLines s.Width t.Shape =
    <DrawLine <Rat (s.Line) s.TotalLines> s.Width t.Shape>
    <DoDrawLines <Sub s.Line 1> s.TotalLines s.Width t.Shape>;
}

DrawLine {
  t.Y s.Width t.Shape =
    <Prout <DoDrawLine t.Y 0 s.Width t.Shape>>
}

DoDrawLine {
  t.Y s.Width s.Width t.Shape = <Color t.Shape ((1) 1) t.Y>;

  t.Y s.Col s.Width t.Shape =
    <Color t.Shape <Rat (s.Col) s.Width> t.Y>
    <DoDrawLine t.Y <Add s.Col 1> s.Width t.Shape>;
}

Circle {
  s.Color t.R t.Cx t.Cy t.X t.Y =
    <Circle-SwCompare
      s.Color
      <CompareR
        <AddR <Square <AbsSubR t.Cx t.X>> <Square <AbsSubR t.Cy t.Y>>>
        <Square t.R>
      >
    >;
}

Circle-SwCompare {
  s.Color '-' = s.Color;
  s.Color '0' = s.Color;
  s.Color s.Other = ' ';
}

Union {
  t.Shape e.Shapes t.X t.Y =
    <Union-SwShape
      <Color t.Shape t.X t.Y> e.Shapes t.X t.Y
    >;

  /* нет фигур */ t.X t.Y = ' ';
}

Union-SwShape {
  ' ' e.Shapes t.X t.Y = <Union e.Shapes t.X t.Y>;
  s.Color e.Shapes t.X t.Y = s.Color;
}

Semiplane {
  s.Color s.Sign t.A s.Op t.B t.C t.X t.Y =
    <Semiplane-SwCompare
      s.Color s.Sign
      <CompareR <Mu s.Op <MulR t.A t.X> <MulR t.B t.Y>> t.C>
   >;
}

Semiplane-SwCompare {
  s.Color s.Sign s.Sign = s.Color;
  s.Color s.Sign s.Other = ' ';
}

CalcSemiplane {
  t.X1 t.Y1 t.X2 t.Y2 s.Color s.Sign s.Op =
    <CalcSemiplane-Aux
      s.Color s.Sign
      <AbsSubR t.Y1 t.Y2> s.Op <AbsSubR t.X1 t.X2>
      t.X1 t.Y1
    >;
}

CalcSemiplane-Aux {
  s.Color s.Sign t.A s.Op t.B t.X1 t.Y1 =
    (Semiplane
      s.Color s.Sign t.A s.Op t.B
      <Mu s.Op <MulR t.A t.X1> <MulR t.B t.Y1>>
    );
}

Intersect {
  s.Color t.Shape e.Shapes t.X t.Y =
    <Intersect-SwShape
      s.Color <Color t.Shape t.X t.Y> e.Shapes t.X t.Y
    >;

  s.Color /* нет фигур */ t.X t.Y = s.Color;
}

Intersect-SwShape {
  s.Color ' ' e.Shapes t.X t.Y = ' ';
  s.Color s.ShapeColor e.Shapes t.X t.Y = <Intersect s.Color e.Shapes t.X t.Y>;
}

FlipH {
  t.AxisX t.Shape t.X t.Y =
    <Color t.Shape <SubR <MulR ((2) 1) t.AxisX> t.X> t.Y>;
}


*
* Параметры фигуры (их можно менять)
*

R { = ((2) 10) }
H { = ((7) 10) }
D { = ((6) 10) }

C1x { = <SubR ((1) 2) <R>> }
C2x { = <AddR ((1) 2) <R>> }

DX {
  = <DivR
      <MulR ((2) 1) <D> <D> <R>>
      <AddR <Square <R>> <Square <D>>>
    >
}

DY {
  = <DivR
      <MulR <D> <SubR <Square <D>> <Square <R>>>>
      <AddR <Square <R>> <Square <D>>>
    >;
}

X1 { = <SubR ((1) 2) <DX>> }
X2 { = <AddR ((1) 2) <DX>> }
YH { = <AddR <YL> <DY>> }
YL { = <SubR <H> <D>> }

$ENTRY Go {
  = <Draw
      <Width>
      (Union
        (Circle '@' <R> <C1x> <H>)
        (Circle '@' <R> <C2x> <H>)
        (Intersect
          '@'
          <CalcSemiplane <X1> <YH> ((1) 2) <YL> '*' '+' AddR>
          (FlipH ((1) 2) <CalcSemiplane <X1> <YH> ((1) 2) <YL> '*' '+' AddR>)
          <CalcSemiplane <X2> <YH> ((1) 2) <H> '*' '-' AddR>
         (FlipH ((1) 2) <CalcSemiplane <X2> <YH> ((1) 2) <H> '*' '-' AddR>)
        )
      )
    >
}

Width {
  = <Width-SwDefined <Numb <Arg 1>>>
}

Width-SwDefined {
  0 = 80;
  s.Width = s.Width;
}
